name: LinuxTestAndBuild

on: [push]

env:
  PROTOC_URL: https://github.com/protocolbuffers/protobuf/releases/download/
  PROTOC_VERSION: 24.1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: "3.10"
          cache: "pip"

      #TODO: Remove?
      # - name: Cache Python dependencies
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-pip
      #   id: cache-pip
      #   with:
      #     path: |
      #       ~/.cache/pip
      #       # How to handle incremental updates of Python versions?
      #       /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10
      #     key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
      #       ${{ runner.os }}-pip-

      - name: Cache apt dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libgl1-mesa-dev

      - name: Install qt dependencies
        env:
          QT_QPA_PLATFORM: offscreen
        uses: tlambert03/setup-qt-libs@v1

      - name: Run virtual screen
        run: |
          sudo apt install xvfb
          export DISPLAY=:0
          export QT_QPA_PLATFORM=offscreen

      - name: Install Nuitka and Python dependencies
        run: |
          sudo apt install -y \
                      ccache \
                      clang \
                      patchelf
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build proto bindings
        run: |
          wget ${{ env.PROTOC_URL }}v${{ env.PROTOC_VERSION }}/protoc-${{ env.PROTOC_VERSION }}-linux-x86_64.zip
          unzip protoc-${{ env.PROTOC_VERSION }}-linux-x86_64.zip
          sudo cp bin/protoc /usr/local/bin/protoc
          protoc --proto_path=proto/ --python_out=proto/ proto/state.proto
          protoc --proto_path=proto/ --python_out=proto/ proto/cache.proto

      # - name: Analysing the code with pylint
      #   run: |
      #     python -m pylint $(git ls-files '*.py') --extension-pkg-whitelist=PySide6 --indent-string='  ' --disable="R, no-member, import-error, no-name-in-module" --generated-members="proto*,bpy*"

      # - name: Run unittests
      #   run: |
      #     test_files=$(find . -name '*_test.py')
      #     for file in $test_files; do
      #         echo "Running tests in $file"
      #         xvfb-run python -m unittest "$file"
      #     done

      - name: Create Python virtual environment
        run: |
          python -m venv venv

      - name: Build
        run: |
          source venv/bin/activate
          l /opt/hostedtoolcache/Python/3.10.12/x64/
          l /opt/hostedtoolcache/Python/3.10.12/x64/lib/site-packages/
          l /opt/hostedtoolcache/Python/3.10.12/x64/lib/site-packages/PySide6/
          l /opt/hostedtoolcache/Python/3.10.12/x64/lib/site-packages/PySide6/scripts/
          python ${{env.pythonLocation}}/lib/site-packages/PySide6/scripts/deploy.py -c pysidedeploy.spec

      - uses: actions/upload-artifact@v3
        with:
          name: renderrob
          path: |
            icons/
            ui/
            renderrob.bin
            renderrob
